{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// Declaring the api url that will provide data for the client app\nconst apiUrl = 'https://myflixdb001.herokuapp.com/';\nclass FetchApiDataService {\n  // Inject the HttpClient module to the constructor params\n  // This will provide HttpClient to the entire class, making it available via this.http\n  constructor(http) {\n    this.http = http;\n  }\n  // Making the api call for the user registration endpoint\n  userRegistration(userDetails) {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n  }\n  // Making the api call for the user login endpoint\n  userLogin(userDetails) {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.handleError));\n  }\n  // Making the api call for the get all movies endpoint\n  getAllMovies() {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies', {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one movie endpoint\n  getOneMovie(title) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies/' + title, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one director endpoint\n  getOneDirector(directorName) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies/director/' + directorName, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one genre endpoint\n  getOneGenre(genreName) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies/genre/' + genreName, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one user endpoint\n  getOneUser() {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'users/' + username, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get favourite movies for a user endpoint\n  getFavoriteMovies() {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'users/' + username, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), map(data => data.FavoriteMovies), catchError(this.handleError));\n  }\n  // Making the api call for the add a movie to favourite Movies endpoint\n  addFavoriteMovie(movieId) {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.post(apiUrl + 'users/' + username + '/movies/' + movieId, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the edit user endpoint\n  editUser(updatedUser) {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.put(apiUrl + 'users/' + username, updatedUser, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the delete user endpoint\n  deleteUser() {\n    const userid = localStorage.getItem('userid');\n    const token = localStorage.getItem('token');\n    return this.http.delete(apiUrl + 'users/' + userid, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for deleting a movie from the favorite movies endpoint\n  deleteFavoriteMovie(movieId) {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.delete(apiUrl + 'users/' + username + '/movies/' + movieId, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Non-typed response extraction\n  extractResponseData(res) {\n    const body = res;\n    return body || {};\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nFetchApiDataService.ɵfac = function FetchApiDataService_Factory(t) {\n  return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nFetchApiDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FetchApiDataService,\n  factory: FetchApiDataService.ɵfac,\n  providedIn: 'root'\n});\nexport { FetchApiDataService };","map":{"version":3,"names":["catchError","map","HttpHeaders","throwError","apiUrl","FetchApiDataService","constructor","http","userRegistration","userDetails","console","log","post","pipe","handleError","userLogin","getAllMovies","token","localStorage","getItem","get","headers","Authorization","extractResponseData","getOneMovie","title","getOneDirector","directorName","getOneGenre","genreName","getOneUser","username","getFavoriteMovies","data","FavoriteMovies","addFavoriteMovie","movieId","editUser","updatedUser","put","deleteUser","userid","delete","deleteFavoriteMovie","res","body","error","ErrorEvent","message","status","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/dan/Documents/GitHub/myFlix-Angular-client/src/app/fetch-api-data.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {catchError, map} from 'rxjs/operators';\nimport {HttpClient, HttpHeaders, HttpErrorResponse} from '@angular/common/http';\nimport {Observable, throwError} from 'rxjs';\n\n\n// Declaring the api url that will provide data for the client app\nconst apiUrl = 'https://myflixdb001.herokuapp.com/';\n@Injectable({providedIn: 'root'})\n\nexport class FetchApiDataService {\n    // Inject the HttpClient module to the constructor params\n    // This will provide HttpClient to the entire class, making it available via this.http\n    constructor(private http : HttpClient) {}\n    // Making the api call for the user registration endpoint\n    public userRegistration(userDetails : any): Observable < any > {\n        console.log(userDetails);\n        return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n    }\n\n    // Making the api call for the user login endpoint\n    public userLogin(userDetails : any): Observable < any > {\n        console.log(userDetails);\n        return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.handleError));\n    }\n\n    // Making the api call for the get all movies endpoint\n    getAllMovies(): Observable < any > {\n        const token = localStorage.getItem('token');\n        return this.http.get(apiUrl + 'movies', {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for the get one movie endpoint\n    getOneMovie(title : string): Observable < any > {\n        const token = localStorage.getItem('token');\n        return this.http.get(apiUrl + 'movies/' + title, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for the get one director endpoint\n    getOneDirector(directorName : string): Observable < any > {\n        const token = localStorage.getItem('token');\n        return this.http.get(apiUrl + 'movies/director/' + directorName, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for the get one genre endpoint\n    getOneGenre(genreName : string): Observable < any > {\n        const token = localStorage.getItem('token');\n        return this.http.get(apiUrl + 'movies/genre/' + genreName, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for the get one user endpoint\n    getOneUser(): Observable < any > {\n        const username = localStorage.getItem('username');\n        const token = localStorage.getItem('token');\n        return this.http.get(apiUrl + 'users/' + username, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for the get favourite movies for a user endpoint\n    getFavoriteMovies(): Observable < any > {\n        const username = localStorage.getItem('username');\n        const token = localStorage.getItem('token');\n        return this.http.get(apiUrl + 'users/' + username, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), map((data) => data.FavoriteMovies), catchError(this.handleError));\n    }\n\n    // Making the api call for the add a movie to favourite Movies endpoint\n    addFavoriteMovie(movieId : string): Observable < any > {\n        const username = localStorage.getItem('username');\n        const token = localStorage.getItem('token');\n        return this.http.post(apiUrl + 'users/' + username + '/movies/' + movieId, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for the edit user endpoint\n    editUser(updatedUser : any): Observable < any > {\n        const username = localStorage.getItem('username');\n        const token = localStorage.getItem('token');\n        return this.http.put(apiUrl + 'users/' + username, updatedUser, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for the delete user endpoint\n    deleteUser(): Observable < any > {\n        const userid = localStorage.getItem('userid');\n        const token = localStorage.getItem('token');\n        return this.http.delete(apiUrl + 'users/' + userid, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Making the api call for deleting a movie from the favorite movies endpoint\n    deleteFavoriteMovie(movieId : string): Observable < any > {\n        const username = localStorage.getItem('username');\n        const token = localStorage.getItem('token');\n        return this.http.delete(apiUrl + 'users/' + username + '/movies/' + movieId, {\n            headers: new HttpHeaders(\n                {\n                    Authorization: 'Bearer ' + token\n                }\n            )\n        }).pipe(map(this.extractResponseData), catchError(this.handleError));\n    }\n\n    // Non-typed response extraction\n    private extractResponseData(res : any): any {\n        const body = res;\n        return body || {};\n    }\n\n\n    private handleError(error : HttpErrorResponse): any {\n        if (error.error instanceof ErrorEvent) {\n            console.error('Some error occurred:', error.error.message);\n        } else {\n            console.error(`Error Status code ${\n                error.status\n            }, ` + `Error body is: ${\n                error.error\n            }`);\n        }\n        return throwError(() => new Error('Something bad happened; please try again later.'));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}