{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//Declaring the api url that will provide data for the client app\nconst apiUrl = 'YOUR_HOSTED_API_URL_HERE/';\nclass UserRegistrationService {\n  // Inject the HttpClient module to the constructor params\n  // This will provide HttpClient to the entire class, making it available via this.http\n  constructor(http) {\n    this.http = http;\n  }\n  // Making the api call for the user registration endpoint\n  userRegistration(userDetails) {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n    }\n    return throwError('Something bad happened; please try again later.');\n  }\n}\nUserRegistrationService.ɵfac = function UserRegistrationService_Factory(t) {\n  return new (t || UserRegistrationService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserRegistrationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserRegistrationService,\n  factory: UserRegistrationService.ɵfac,\n  providedIn: 'root'\n});\nexport { UserRegistrationService };","map":{"version":3,"names":["catchError","throwError","apiUrl","UserRegistrationService","constructor","http","userRegistration","userDetails","console","log","post","pipe","handleError","error","ErrorEvent","message","status","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/dan/Documents/GitHub/myFlix-Angular-client/src/app/fetch-api-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n//Declaring the api url that will provide data for the client app\nconst apiUrl = 'YOUR_HOSTED_API_URL_HERE/';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserRegistrationService {\n  // Inject the HttpClient module to the constructor params\n // This will provide HttpClient to the entire class, making it available via this.http\n  constructor(private http: HttpClient) {\n  }\n // Making the api call for the user registration endpoint\n  public userRegistration(userDetails: any): Observable<any> {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'users', userDetails).pipe(\n    catchError(this.handleError)\n    );\n  }\n\nprivate handleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n    console.error('Some error occurred:', error.error.message);\n    } else {\n    console.error(\n        `Error Status code ${error.status}, ` +\n        `Error body is: ${error.error}`);\n    }\n    return throwError(\n    'Something bad happened; please try again later.');\n  }\n}"],"mappings":"AACA,SAASA,UAAU,QAAQ,gBAAgB;AAE3C,SAAqBC,UAAU,QAAQ,MAAM;;;AAG7C;AACA,MAAMC,MAAM,GAAG,2BAA2B;AAC1C,MAGaC,uBAAuB;EAClC;EACD;EACCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EACxB;EACD;EACQC,gBAAgBA,CAACC,WAAgB;IACtCC,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxB,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CAACR,MAAM,GAAG,OAAO,EAAEK,WAAW,CAAC,CAACI,IAAI,CACzDX,UAAU,CAAC,IAAI,CAACY,WAAW,CAAC,CAC3B;EACH;EAEMA,WAAWA,CAACC,KAAwB;IACxC,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACvCN,OAAO,CAACK,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;KACzD,MAAM;MACPP,OAAO,CAACK,KAAK,CACT,qBAAqBA,KAAK,CAACG,MAAM,IAAI,GACrC,kBAAkBH,KAAK,CAACA,KAAK,EAAE,CAAC;;IAEpC,OAAOZ,UAAU,CACjB,iDAAiD,CAAC;EACpD;;AAvBWE,uBAAuB,C;mBAAvBA,uBAAuB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAvBjB,uBAAuB,C;SAAvBA,uBAAuB;EAAAkB,OAAA,EAAvBlB,uBAAuB,CAAAmB,IAAA;EAAAC,UAAA,EAFtB;AAAM;SAEPpB,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}