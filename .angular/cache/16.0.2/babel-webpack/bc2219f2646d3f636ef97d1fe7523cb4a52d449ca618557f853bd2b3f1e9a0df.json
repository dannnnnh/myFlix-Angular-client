{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n//Declaring the api url that will provide data for the client app\nconst apiUrl = 'https://myflixdb001.herokuapp.com';\nclass FetchApiDataService {\n  // Inject the HttpClient module to the constructor params\n  // This will provide HttpClient to the entire class, making it available via this.http\n  constructor(http) {\n    this.http = http;\n  }\n  // Making the api call for the user registration endpoint\n  userRegistration(userDetails) {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'users', userDetails).pipe(catchError(this.handleError));\n  }\n  // Making the api call for the user login endpoint\n  userLogin(userDetails) {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'login', userDetails).pipe(catchError(this.handleError));\n  }\n  // Making the api call for the get all movies endpoint\n  getAllMovies() {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies', {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one movie endpoint\n  getOneMovie(title) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies/' + title, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one director endpoint\n  getOneDirector(directorName) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies/director/' + directorName, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one genre endpoint\n  getOneGenre(genreName) {\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'movies/genre/' + genreName, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get one user endpoint\n  getOneUser() {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'users/' + username, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the get favourite movies for a user endpoint\n  getFavoriteMovies() {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.get(apiUrl + 'users/' + username, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), map(data => data.FavoriteMovies), catchError(this.handleError));\n  }\n  // Making the api call for the add a movie to favourite Movies endpoint\n  addFavoriteMovie(movieId) {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.post(apiUrl + 'users/' + username + '/movies/' + movieId, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the edit user endpoint\n  editUser(updatedUser) {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.put(apiUrl + 'users/' + username, updatedUser, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for the delete user endpoint\n  deleteUser() {\n    const userid = localStorage.getItem('userid');\n    const token = localStorage.getItem('token');\n    return this.http.delete(apiUrl + 'users/' + userid, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Making the api call for deleting a movie from the favorite movies endpoint\n  deleteFavoriteMovie(movieId) {\n    const username = localStorage.getItem('username');\n    const token = localStorage.getItem('token');\n    return this.http.delete(apiUrl + 'users/' + username + '/movies/' + movieId, {\n      headers: new HttpHeaders({\n        Authorization: 'Bearer ' + token\n      })\n    }).pipe(map(this.extractResponseData), catchError(this.handleError));\n  }\n  // Non-typed response extraction\n  extractResponseData(res) {\n    const body = res;\n    return body || {};\n  }\n  handleError(error) {\n    if (error.error instanceof ErrorEvent) {\n      console.error('Some error occurred:', error.error.message);\n    } else {\n      console.error(`Error Status code ${error.status}, ` + `Error body is: ${error.error}`);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nFetchApiDataService.ɵfac = function FetchApiDataService_Factory(t) {\n  return new (t || FetchApiDataService)(i0.ɵɵinject(i1.HttpClient));\n};\nFetchApiDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FetchApiDataService,\n  factory: FetchApiDataService.ɵfac,\n  providedIn: 'root'\n});\nexport { FetchApiDataService };","map":{"version":3,"names":["catchError","map","HttpHeaders","throwError","apiUrl","FetchApiDataService","constructor","http","userRegistration","userDetails","console","log","post","pipe","handleError","userLogin","getAllMovies","token","localStorage","getItem","get","headers","Authorization","extractResponseData","getOneMovie","title","getOneDirector","directorName","getOneGenre","genreName","getOneUser","username","getFavoriteMovies","data","FavoriteMovies","addFavoriteMovie","movieId","editUser","updatedUser","put","deleteUser","userid","delete","deleteFavoriteMovie","res","body","error","ErrorEvent","message","status","Error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/dan/Documents/GitHub/myFlix-Angular-client/src/app/fetch-api-data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\n\n\n//Declaring the api url that will provide data for the client app\nconst apiUrl = 'https://myflixdb001.herokuapp.com';\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class FetchApiDataService {\n  // Inject the HttpClient module to the constructor params\n // This will provide HttpClient to the entire class, making it available via this.http\n  constructor(private http: HttpClient) {\n  }\n // Making the api call for the user registration endpoint\n  public userRegistration(userDetails: any): Observable<any> {\n    console.log(userDetails);\n    return this.http.post(apiUrl + 'users', userDetails).pipe(\n    catchError(this.handleError)\n    );\n  }\n\n// Making the api call for the user login endpoint\npublic userLogin(userDetails: any): Observable<any> {\n  console.log(userDetails);\n  return this.http.post(apiUrl + 'login', userDetails).pipe(\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the get all movies endpoint\ngetAllMovies(): Observable<any> {\n  const token = localStorage.getItem('token');\n  return this.http.get(apiUrl + 'movies', {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the get one movie endpoint\ngetOneMovie(title: string): Observable<any> {\n  const token = localStorage.getItem('token');\n  return this.http.get(apiUrl + 'movies/' + title, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the get one director endpoint\ngetOneDirector(directorName: string): Observable<any> {\n  const token = localStorage.getItem('token');\n  return this.http.get(apiUrl + 'movies/director/' + directorName, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the get one genre endpoint\ngetOneGenre(genreName: string): Observable<any> {\n  const token = localStorage.getItem('token');\n  return this.http.get(apiUrl + 'movies/genre/' + genreName, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the get one user endpoint\ngetOneUser(): Observable<any> {\n  const username = localStorage.getItem('username');\n  const token = localStorage.getItem('token');\n  return this.http.get(apiUrl + 'users/' + username, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the get favourite movies for a user endpoint\ngetFavoriteMovies(): Observable<any> {\n  const username = localStorage.getItem('username');\n  const token = localStorage.getItem('token');\n  return this.http.get(apiUrl + 'users/' + username, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    map((data) => data.FavoriteMovies),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the add a movie to favourite Movies endpoint\naddFavoriteMovie(movieId: string): Observable<any> {\n  const username = localStorage.getItem('username');\n  const token = localStorage.getItem('token');\n  return this.http.post(apiUrl + 'users/' + username + '/movies/' + movieId, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the edit user endpoint\neditUser(updatedUser: any): Observable<any> {\n  const username = localStorage.getItem('username');\n  const token = localStorage.getItem('token');\n  return this.http.put(apiUrl + 'users/' + username, updatedUser, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for the delete user endpoint\ndeleteUser(): Observable<any> {\n  const userid = localStorage.getItem('userid');\n  const token = localStorage.getItem('token');\n  return this.http.delete(apiUrl + 'users/' + userid, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Making the api call for deleting a movie from the favorite movies endpoint\ndeleteFavoriteMovie(movieId: string): Observable<any> {\n  const username = localStorage.getItem('username');\n  const token = localStorage.getItem('token');\n  return this.http.delete(apiUrl + 'users/' + username + '/movies/' + movieId, {\n    headers: new HttpHeaders(\n      {\n        Authorization: 'Bearer ' + token,\n      })\n  }).pipe(\n    map(this.extractResponseData),\n    catchError(this.handleError)\n  );\n}\n\n// Non-typed response extraction\nprivate extractResponseData(res: any): any {\n  const body = res;\n  return body || {};\n}\n\n\nprivate handleError(error: HttpErrorResponse): any {\n    if (error.error instanceof ErrorEvent) {\n    console.error('Some error occurred:', error.error.message);\n    } else {\n    console.error(\n        `Error Status code ${error.status}, ` +\n        `Error body is: ${error.error}`);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}"],"mappings":"AACA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAAqBC,WAAW,QAA2B,sBAAsB;AACjF,SAAqBC,UAAU,QAAQ,MAAM;;;AAG7C;AACA,MAAMC,MAAM,GAAG,mCAAmC;AAClD,MAIaC,mBAAmB;EAC9B;EACD;EACCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EACxB;EACD;EACQC,gBAAgBA,CAACC,WAAgB;IACtCC,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxB,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CAACR,MAAM,GAAG,OAAO,EAAEK,WAAW,CAAC,CAACI,IAAI,CACzDb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC3B;EACH;EAEF;EACOC,SAASA,CAACN,WAAgB;IAC/BC,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;IACxB,OAAO,IAAI,CAACF,IAAI,CAACK,IAAI,CAACR,MAAM,GAAG,OAAO,EAAEK,WAAW,CAAC,CAACI,IAAI,CACvDb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAE,YAAYA,CAAA;IACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAChB,MAAM,GAAG,QAAQ,EAAE;MACtCiB,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAU,WAAWA,CAACC,KAAa;IACvB,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAChB,MAAM,GAAG,SAAS,GAAGqB,KAAK,EAAE;MAC/CJ,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAY,cAAcA,CAACC,YAAoB;IACjC,MAAMV,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAChB,MAAM,GAAG,kBAAkB,GAAGuB,YAAY,EAAE;MAC/DN,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAc,WAAWA,CAACC,SAAiB;IAC3B,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAChB,MAAM,GAAG,eAAe,GAAGyB,SAAS,EAAE;MACzDR,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAgB,UAAUA,CAAA;IACR,MAAMC,QAAQ,GAAGb,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,MAAMF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAChB,MAAM,GAAG,QAAQ,GAAG2B,QAAQ,EAAE;MACjDV,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAkB,iBAAiBA,CAAA;IACf,MAAMD,QAAQ,GAAGb,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,MAAMF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAChB,MAAM,GAAG,QAAQ,GAAG2B,QAAQ,EAAE;MACjDV,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BtB,GAAG,CAAEgC,IAAI,IAAKA,IAAI,CAACC,cAAc,CAAC,EAClClC,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAqB,gBAAgBA,CAACC,OAAe;IAC9B,MAAML,QAAQ,GAAGb,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,MAAMF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACK,IAAI,CAACR,MAAM,GAAG,QAAQ,GAAG2B,QAAQ,GAAG,UAAU,GAAGK,OAAO,EAAE;MACzEf,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACAuB,QAAQA,CAACC,WAAgB;IACvB,MAAMP,QAAQ,GAAGb,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,MAAMF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACgC,GAAG,CAACnC,MAAM,GAAG,QAAQ,GAAG2B,QAAQ,EAAEO,WAAW,EAAE;MAC9DjB,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACA0B,UAAUA,CAAA;IACR,MAAMC,MAAM,GAAGvB,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IAC7C,MAAMF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACmC,MAAM,CAACtC,MAAM,GAAG,QAAQ,GAAGqC,MAAM,EAAE;MAClDpB,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACA6B,mBAAmBA,CAACP,OAAe;IACjC,MAAML,QAAQ,GAAGb,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACjD,MAAMF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAO,IAAI,CAACZ,IAAI,CAACmC,MAAM,CAACtC,MAAM,GAAG,QAAQ,GAAG2B,QAAQ,GAAG,UAAU,GAAGK,OAAO,EAAE;MAC3Ef,OAAO,EAAE,IAAInB,WAAW,CACtB;QACEoB,aAAa,EAAE,SAAS,GAAGL;OAC5B;KACJ,CAAC,CAACJ,IAAI,CACLZ,GAAG,CAAC,IAAI,CAACsB,mBAAmB,CAAC,EAC7BvB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAC,CAC7B;EACH;EAEA;EACQS,mBAAmBA,CAACqB,GAAQ;IAClC,MAAMC,IAAI,GAAGD,GAAG;IAChB,OAAOC,IAAI,IAAI,EAAE;EACnB;EAGQ/B,WAAWA,CAACgC,KAAwB;IACxC,IAAIA,KAAK,CAACA,KAAK,YAAYC,UAAU,EAAE;MACvCrC,OAAO,CAACoC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACA,KAAK,CAACE,OAAO,CAAC;KACzD,MAAM;MACPtC,OAAO,CAACoC,KAAK,CACT,qBAAqBA,KAAK,CAACG,MAAM,IAAI,GACrC,kBAAkBH,KAAK,CAACA,KAAK,EAAE,CAAC;;IAEpC,OAAO3C,UAAU,CAAC,MAAM,IAAI+C,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;AAxLW7C,mBAAmB,C;mBAAnBA,mBAAmB,EAAA8C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAnBjD,mBAAmB,C;SAAnBA,mBAAmB;EAAAkD,OAAA,EAAnBlD,mBAAmB,CAAAmD,IAAA;EAAAC,UAAA,EAHlB;AAAM;SAGPpD,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}